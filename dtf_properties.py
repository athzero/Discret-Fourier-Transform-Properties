# -*- coding: utf-8 -*-
"""DTF properties.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1deHz10upigW-2QHFKMNtMunxZLsOCMHT
"""

import numpy as np

def shift(signal, N):
    return np.roll(signal, N)

def ddft(signal, N, eps):
    f_trans = []
    for i in range(N):
        temp = 0
        for j in range(N):
            temp += signal[j] * np.exp(-eps * j * i)
        f_trans.append(temp/np.sqrt(N))
    return np.array(f_trans)

def convolution(f_signal, g_signal):
    result = []
    for i in range(len(f_signal)):
        temp = 0
        for j in range(len(f_signal)):
            temp += f_signal[i - j] * g_signal[j]
        result.append(temp)
    return result

N = 10
h = 2 * np.pi / N
eps = 1j * h

f = []
g = []

for i in range(N):
    f.append(np.random.rand())
    g.append(np.random.rand())

f = np.array(f)
g = np.array(g)

print('array f:')
for ff in f:
    print(ff)

print('\narray g:')
for gg in g:
    print(gg)

# Первое свойтсво (сдвиг)

p = 5
f_shift = shift(f, p)
trans_f_shift = ddft(f_shift, N, eps)
trans_f = np.exp(-1j * h * np.arange(N) * p) * ddft(f, N, eps)

print('\nwith shift')
for i in range(5):
    print(np.real(trans_f_shift[i]))

print('\nwithout shift:')
for i in range(5):
    print(np.real(trans_f[i]))

print('\nnorm:', np.linalg.norm(trans_f_shift - trans_f))

# Второе свойство (свёртка)

trans_f = ddft(f, N, eps)
trans_g = ddft(g, N, eps)

conv_fg = convolution(f, g)
trans_conv_fg = ddft(conv_fg, N, eps)

res = []
for i in range(N):
    res.append(np.sqrt(N) * trans_f[i] * trans_g[i])

print('\nAfter transform and convolution f and g:')
for i in range(5):
    print(np.real(res[i]))
print('\nres:')
for i in range(5):
    print(np.real(res[i]))

print('\nnorm:', np.linalg.norm(np.array(res) - trans_conv_fg))

# Третье свойство (Парсеваль)

trans_f = ddft(f, N, eps)

trans_f_norm = np.linalg.norm(trans_f)
f_norm = np.linalg.norm(f)
res_norm = np.linalg.norm(trans_f_norm - f_norm)

print('res_norm:', res_norm)